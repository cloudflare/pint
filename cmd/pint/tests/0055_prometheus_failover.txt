http response prometheus /api/v1/status/config 200 {"status":"success","data":{"yaml":"global:\n  scrape_interval: 30s\n"}}
http response prometheus /api/v1/query_range 200 {"status":"success","data":{"resultType":"matrix","result":[]}}
http response prometheus /api/v1/query 200 {"status":"success","data":{"resultType":"vector","result":[]}}
http start prometheus 127.0.0.1:7055

! exec pint --no-color lint rules
! stdout .
stderr 'level=ERROR msg="Query returned an error" err="Post \\"http://127.0.0.1:1055/api/v1/query\\": dial tcp 127.0.0.1:1055: connect: connection refused" uri=http://127.0.0.1:1055 query=count\(foo\)'
stderr 'level=ERROR msg="Query returned an error" err="failed to query Prometheus config: Get \\"http://127.0.0.1:1055/api/v1/status/config\\": dial tcp 127.0.0.1:1055: connect: connection refused" uri=http://127.0.0.1:1055 query=/api/v1/status/config'
! stderr 'query="count\(foo offset '
stderr '`prom` Prometheus server at http://127.0.0.1:7055 didn''t have any series for `foo` metric in the last 1w.'

-- rules/1.yml --
- record: aggregate
  expr: sum(foo) without(job)

-- .pint.hcl --
prometheus "prom" {
  uri      = "http://127.0.0.1:1055"
  failover = ["http://127.0.0.1:7055"]
  timeout  = "5s"
  required = true
}
parser {
  relaxed = [".*"]
}
