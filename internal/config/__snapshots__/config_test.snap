
[TestGetChecksForRule/two_checks_enabled_via_config - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "promql/syntax",
      "alerts/count"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom1",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "include": [
        "rules.yml"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ],
  "rules": [
    {
      "alerts": {
        "range": "1h",
        "step": "1m",
        "resolve": "5m"
      }
    }
  ]
}
---

[TestGetChecksForRule/rule_with_ignore_block_/_mismatch - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "promql/syntax",
      "alerts/count"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom1",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "include": [
        "rules.yml"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ],
  "rules": [
    {
      "ignore": [
        {
          "path": "foo.xml"
        }
      ],
      "alerts": {
        "range": "1h",
        "step": "1m",
        "resolve": "5m"
      }
    }
  ]
}
---

[TestGetChecksForRule/rule_with_ignore_block_/_match - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "promql/syntax",
      "alerts/count"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom1",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "include": [
        "rules.yml"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ],
  "rules": [
    {
      "ignore": [
        {
          "path": "rules.yml"
        }
      ],
      "alerts": {
        "range": "1h",
        "step": "1m",
        "resolve": "5m"
      }
    }
  ]
}
---

[TestGetChecksForRule/defaults - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {}
}
---

[TestGetChecksForRule/single_prometheus_server_/_path_mismatch - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "include": [
        "foo.yml"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ]
}
---

[TestGetChecksForRule/single_prometheus_server_/_include_&_exclude - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "include": [
        ".*"
      ],
      "exclude": [
        "rules.yml"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ]
}
---

[TestGetChecksForRule/single_prometheus_server_/_excluded - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "exclude": [
        "rules.yml"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ]
}
---

[TestGetChecksForRule/single_empty_rule - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {}
  ]
}
---

[TestGetChecksForRule/rule_with_aggregate_checks - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "aggregate": [
        {
          "name": ".+",
          "severity": "bug",
          "keep": [
            "job"
          ]
        },
        {
          "name": ".+",
          "severity": "bug",
          "strip": [
            "instance",
            "rack"
          ]
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/multiple_checks_and_disable_comment - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "aggregate": [
        {
          "name": ".+",
          "severity": "bug",
          "keep": [
            "job"
          ]
        },
        {
          "name": ".+",
          "comment": "this is rule comment",
          "severity": "bug",
          "strip": [
            "instance",
            "rack"
          ]
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/prometheus_check_without_prometheus_server - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "cost": {
        "comment": "this is rule comment",
        "severity": "warning",
        "maxSeries": 10000
      }
    }
  ]
}
---

[TestGetChecksForRule/reject_rules - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "reject": [
        {
          "key": "http://.+",
          "label_keys": true,
          "label_values": true
        },
        {
          "key": ".* +.*",
          "comment": "this is rule comment",
          "label_keys": true,
          "annotation_keys": true
        },
        {
          "comment": "this is rule comment",
          "severity": "bug",
          "annotation_values": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/rule_with_label_match_/_type_mismatch - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "match": [
        {
          "label": {
            "key": "cluster",
            "value": "prod"
          },
          "kind": "alerting"
        }
      ],
      "label": [
        {
          "key": "priority",
          "value": "(1|2|3|4|5)",
          "severity": "bug",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/for_match_/_recording_rules_/_not_passing - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "match": [
        {
          "for": "!= 15m"
        }
      ],
      "annotation": [
        {
          "key": "summary",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/for_ignore_/_recording_rules_/_passing - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "ignore": [
        {
          "for": "\u003e 0"
        }
      ],
      "annotation": [
        {
          "key": "summary",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/link - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "link": [
        {
          "key": "https?://(.+)",
          "uri": "http://localhost/$1",
          "timeout": "10s",
          "headers": {
            "X-Auth": "xxx"
          },
          "comment": "this is rule comment",
          "severity": "bug"
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/single_prometheus_server - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ]
}
---

[TestGetChecksForRule/multiple_URIs - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "failover": [
        "http://localhost/1",
        "http://localhost/2"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ]
}
---

[TestGetChecksForRule/single_prometheus_server_/_path_match - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "include": [
        "rules.yml"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ]
}
---

[TestGetChecksForRule/multiple_prometheus_servers - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "include": [
        "rules.yml"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    },
    {
      "name": "ignore",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "include": [
        "foo.+"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ]
}
---

[TestGetChecksForRule/prometheus_check_with_prometheus_servers_and_disable_comment - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom1",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "include": [
        "rules.yml"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    },
    {
      "name": "prom2",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "include": [
        "rules.yml"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ],
  "rules": [
    {
      "cost": {}
    }
  ]
}
---

[TestGetChecksForRule/two_prometheus_servers_/_disable_all_checks_via_comment - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ],
    "disabled": [
      "alerts/template",
      "alerts/external_labels"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom1",
      "uri": "http://localhost/1",
      "timeout": "1s",
      "uptime": "up",
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    },
    {
      "name": "prom2",
      "uri": "http://localhost/2",
      "timeout": "1s",
      "uptime": "up",
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ]
}
---

[TestGetChecksForRule/checks_disabled_via_config - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ],
    "disabled": [
      "promql/counter",
      "promql/rate",
      "promql/vector_matching",
      "promql/range_query",
      "rule/duplicate",
      "labels/conflict"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom1",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "include": [
        "rules.yml"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ],
  "rules": [
    {
      "alerts": {
        "range": "1h",
        "step": "1m",
        "resolve": "5m"
      }
    }
  ]
}
---

[TestGetChecksForRule/single_check_enabled_via_config - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {},
  "owners": {},
  "prometheus": [
    {
      "name": "prom1",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "include": [
        "rules.yml"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ],
  "rules": [
    {
      "alerts": {
        "range": "1h",
        "step": "1m",
        "resolve": "5m"
      }
    }
  ]
}
---

[TestGetChecksForRule/two_prometheus_servers_/_disable_checks_via_file/disable_comment - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ],
    "disabled": [
      "alerts/template",
      "alerts/external_labels"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom1",
      "uri": "http://localhost/1",
      "timeout": "1s",
      "uptime": "up",
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    },
    {
      "name": "prom2",
      "uri": "http://localhost/2",
      "timeout": "1s",
      "uptime": "up",
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ]
}
---

[TestGetChecksForRule/tag_snoozes_all_prometheus_checks - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom1",
      "uri": "http://localhost/1",
      "timeout": "2m0s",
      "uptime": "up",
      "tags": [
        "foo",
        "disable",
        "bar"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    },
    {
      "name": "prom2",
      "uri": "http://localhost/2",
      "timeout": "2m0s",
      "uptime": "up",
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    },
    {
      "name": "prom3",
      "uri": "http://localhost/3",
      "timeout": "2m0s",
      "uptime": "up",
      "tags": [
        "foo"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ]
}
---

[TestGetChecksForRule/alerts/count_defaults - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ],
  "rules": [
    {
      "alerts": {
        "range": "1d",
        "step": "1m",
        "resolve": "5m"
      }
    }
  ]
}
---

[TestGetChecksForRule/tag_disables_all_prometheus_checks - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom1",
      "uri": "http://localhost/1",
      "timeout": "2m0s",
      "uptime": "up",
      "tags": [
        "foo",
        "disable",
        "bar"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    },
    {
      "name": "prom2",
      "uri": "http://localhost/2",
      "timeout": "2m0s",
      "uptime": "up",
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    },
    {
      "name": "prom3",
      "uri": "http://localhost/3",
      "timeout": "2m0s",
      "uptime": "up",
      "tags": [
        "foo"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ]
}
---

[TestGetChecksForRule/alerts/count_full - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ],
  "rules": [
    {
      "alerts": {
        "range": "1d",
        "step": "1m",
        "resolve": "5m",
        "comment": "this is rule comment",
        "severity": "bug",
        "minCount": 100
      }
    }
  ]
}
---

[TestGetChecksForRule/duplicated_rules - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "label": [
        {
          "key": "team",
          "severity": "bug",
          "required": true
        }
      ]
    },
    {
      "annotation": [
        {
          "key": "summary",
          "severity": "bug",
          "required": true
        }
      ]
    },
    {
      "annotation": [
        {
          "key": "summary",
          "severity": "bug",
          "required": true
        }
      ],
      "label": [
        {
          "key": "team",
          "comment": "this is rule comment",
          "severity": "warning"
        }
      ]
    },
    {
      "annotation": [
        {
          "key": "summary",
          "value": "foo.+",
          "comment": "this is rule comment",
          "severity": "bug",
          "required": true
        }
      ]
    },
    {
      "annotation": [
        {
          "key": "summary",
          "token": "\\w+",
          "value": "foo.+",
          "severity": "bug",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/rule_with_label_match_/_no_label - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "match": [
        {
          "label": {
            "key": "cluster",
            "value": "prod"
          },
          "kind": "alerting"
        }
      ],
      "label": [
        {
          "key": "priority",
          "value": "(1|2|3|4|5)",
          "severity": "bug",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/rule_with_label_match_/_label_mismatch - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "match": [
        {
          "label": {
            "key": "cluster",
            "value": "prod"
          },
          "kind": "alerting"
        }
      ],
      "label": [
        {
          "key": "priority",
          "value": "(1|2|3|4|5)",
          "severity": "bug",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/rule_with_label_match_/_label_match - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "match": [
        {
          "label": {
            "key": "cluster",
            "value": "prod"
          },
          "kind": "alerting"
        }
      ],
      "label": [
        {
          "key": "priority",
          "value": "(1|2|3|4|5)",
          "severity": "bug",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/rule_with_annotation_match_/_no_annotation - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "match": [
        {
          "annotation": {
            "key": "cluster",
            "value": "prod"
          },
          "kind": "alerting"
        }
      ],
      "label": [
        {
          "key": "priority",
          "value": "(1|2|3|4|5)",
          "severity": "bug",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/rule_with_annotation_match_/_annotation_mismatch - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "match": [
        {
          "annotation": {
            "key": "cluster",
            "value": "prod"
          },
          "kind": "alerting"
        }
      ],
      "label": [
        {
          "key": "priority",
          "value": "(1|2|3|4|5)",
          "severity": "bug",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/rule_with_annotation_match_/_annotation_match - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "match": [
        {
          "annotation": {
            "key": "cluster",
            "value": "prod"
          },
          "kind": "alerting"
        }
      ],
      "label": [
        {
          "key": "priority",
          "token": "\\w+",
          "value": "(1|2|3|4|5)",
          "comment": "this is rule comment",
          "severity": "bug",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/for_match_/_passing - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "match": [
        {
          "for": "\u003e 15m"
        }
      ],
      "annotation": [
        {
          "key": "summary",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/for_match_/_not_passing - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "match": [
        {
          "for": "\u003e 15m"
        }
      ],
      "annotation": [
        {
          "key": "summary",
          "comment": "this is rule comment",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/for_match_/_passing#01 - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "match": [
        {
          "keep_firing_for": "\u003e 15m"
        }
      ],
      "annotation": [
        {
          "key": "summary",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/for_match_/_passing#02 - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "match": [
        {
          "keep_firing_for": "\u003e 15m"
        }
      ],
      "annotation": [
        {
          "key": "summary",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/for_match_/_passing#03 - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "match": [
        {
          "keep_firing_for": "\u003e 15m"
        }
      ],
      "annotation": [
        {
          "key": "summary",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/for_ignore_/_passing - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "ignore": [
        {
          "for": "\u003c 15m"
        }
      ],
      "annotation": [
        {
          "key": "summary",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/for_ignore_/_not_passing - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "rules": [
    {
      "ignore": [
        {
          "for": "\u003c 15m"
        }
      ],
      "annotation": [
        {
          "key": "summary",
          "comment": "this is rule comment",
          "required": true
        }
      ]
    }
  ]
}
---

[TestGetChecksForRule/multiple_cost_checks - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom1",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "include": [
        "rules.yml"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    },
    {
      "name": "prom2",
      "uri": "http://localhost",
      "timeout": "1s",
      "uptime": "up",
      "include": [
        "rules.yml"
      ],
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ],
  "rules": [
    {
      "cost": {
        "comment": "this is rule comment",
        "severity": "info"
      }
    },
    {
      "cost": {
        "severity": "warning",
        "maxSeries": 10000
      }
    },
    {
      "cost": {
        "severity": "bug",
        "maxSeries": 20000
      }
    }
  ]
}
---

[TestGetChecksForRule/two_prometheus_servers_/_snoozed_checks_via_comment - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ],
    "disabled": [
      "alerts/template",
      "promql/regexp"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom1",
      "uri": "http://localhost/1",
      "timeout": "1s",
      "uptime": "up",
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    },
    {
      "name": "prom2",
      "uri": "http://localhost/2",
      "timeout": "1s",
      "uptime": "up",
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ]
}
---

[TestGetChecksForRule/two_prometheus_servers_/_expired_snooze - 1]
{
  "ci": {
    "baseBranch": "master",
    "maxCommits": 20
  },
  "parser": {},
  "checks": {
    "enabled": [
      "alerts/annotation",
      "alerts/count",
      "alerts/external_labels",
      "alerts/for",
      "alerts/template",
      "labels/conflict",
      "promql/aggregate",
      "alerts/comparison",
      "promql/fragile",
      "promql/range_query",
      "promql/rate",
      "promql/regexp",
      "promql/syntax",
      "promql/vector_matching",
      "query/cost",
      "promql/counter",
      "promql/series",
      "rule/dependency",
      "rule/duplicate",
      "rule/for",
      "rule/label",
      "rule/link",
      "rule/reject",
      "rule/topk"
    ],
    "disabled": [
      "alerts/template",
      "promql/regexp"
    ]
  },
  "owners": {},
  "prometheus": [
    {
      "name": "prom1",
      "uri": "http://localhost/1",
      "timeout": "1s",
      "uptime": "up",
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    },
    {
      "name": "prom2",
      "uri": "http://localhost/2",
      "timeout": "1s",
      "uptime": "up",
      "concurrency": 16,
      "rateLimit": 100,
      "required": false
    }
  ]
}
---
