
[TestLabelsSource/148 - 1]
expr: |4-
    sum by (foo, bar) (
        rate(errors_total[5m])
      * on (instance) group_left (bob, alice)
        server_errors_total
    )
output:
    - labels:
        "":
            reason: Query is using aggregation with `by(foo, bar)`, only labels included inside `by(...)` will be present on the results.
            fragment:
                start: 5
                end: 8
            kind: excluded
        __name__:
            reason: Aggregation removes metric name.
            fragment:
                start: 1
                end: 115
            kind: excluded
        alice:
            reason: Query is using aggregation with `by(foo, bar)`, only labels included inside `by(...)` will be present on the results.
            fragment:
                start: 5
                end: 8
            kind: excluded
        bar:
            reason: Query is using aggregation with `by(foo, bar)`, only labels included inside `by(...)` will be present on the results.
            fragment:
                start: 5
                end: 8
            kind: included
        bob:
            reason: Query is using aggregation with `by(foo, bar)`, only labels included inside `by(...)` will be present on the results.
            fragment:
                start: 5
                end: 8
            kind: excluded
        foo:
            reason: Query is using aggregation with `by(foo, bar)`, only labels included inside `by(...)` will be present on the results.
            fragment:
                start: 5
                end: 8
            kind: included
        instance:
            reason: Query is using aggregation with `by(foo, bar)`, only labels included inside `by(...)` will be present on the results.
            fragment:
                start: 5
                end: 8
            kind: excluded
      operation: sum
      isdeadreason: ""
      returns: vector
      joins:
        - labels: {}
          operation: ""
          isdeadreason: ""
          returns: vector
          joins: []
          unless: []
          position:
            start: 94
            end: 113
          isdeadposition:
            start: 0
            end: 0
          returnednumber: 0
          type: 3
          fixedlabels: false
          isdead: false
          alwaysreturns: false
          knownreturn: false
          isconditional: false
          isreturnbool: false
      unless: []
      position:
        start: 30
        end: 46
      isdeadposition:
        start: 0
        end: 0
      returnednumber: 0
      type: 5
      fixedlabels: true
      isdead: false
      alwaysreturns: false
      knownreturn: false
      isconditional: false
      isreturnbool: false

---
