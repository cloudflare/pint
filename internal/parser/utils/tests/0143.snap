
[TestLabelsSource/143 - 1]
expr: |4
     max without (source_instance) (
       increase(kernel_device_io_errors_total{device!~"loop.+"}[120m]) > 3 unless on(instance, device) (
         increase(kernel_device_io_soft_errors_total{device!~"loop.+"}[125m])*2 > increase(kernel_device_io_errors_total[120m])
       )
       and on(device, instance) absent(node_disk_info)
     ) * on(instance) group_left(group) label_replace(salt_highstate_runner_configured_minions, "instance", "$1", "minion", "(.+)")
output:
    - labels:
        __name__:
            reason: Aggregation removes metric name.
            fragment:
                start: 2
                end: 317
            kind: excluded
        device:
            reason: Query is using many-to-many vector matching with `on(device, instance)`, labels included inside `on(...)` will be present on the results.
            fragment:
                start: 112
                end: 114
            kind: included
        group:
            reason: Query is using many-to-one vector matching with `group_left(group)`, all labels included inside `group_left(...)` will be include on the results.
            fragment:
                start: 333
                end: 343
            kind: included
        instance:
            reason: Query is using many-to-one vector matching with `on(instance)`, labels included inside `on(...)` will be present on the results.
            fragment:
                start: 112
                end: 114
            kind: included
        source_instance:
            reason: Query is using aggregation with `without(source_instance)`, all labels included inside `without(...)` will be removed from the results.
            fragment:
                start: 6
                end: 14
            kind: excluded
      operation: max
      isdeadreason: ""
      returns: vector
      joins:
        - labels:
            "":
                reason: |-
                    The [absent()](https://prometheus.io/docs/prometheus/latest/querying/functions/#absent) function is used to check if provided query doesn't match any time series.
                    You will only get any results back if the metric selector you pass doesn't match anything.
                    Since there are no matching time series there are also no labels. If some time series is missing you cannot read its labels.
                    This means that the only labels you can get back from absent call are the ones you pass to it.
                    If you're hoping to get instance specific labels this way and alert when some target is down then that won't work, use the `up` metric instead.
                fragment:
                    start: 292
                    end: 298
                kind: excluded
          operation: absent
          isdeadreason: |-
            The right hand side will never be matched because it doesn't have the `device` label from `on(...)`. The [absent()](https://prometheus.io/docs/prometheus/latest/querying/functions/#absent) function is used to check if provided query doesn't match any time series.
            You will only get any results back if the metric selector you pass doesn't match anything.
            Since there are no matching time series there are also no labels. If some time series is missing you cannot read its labels.
            This means that the only labels you can get back from absent call are the ones you pass to it.
            If you're hoping to get instance specific labels this way and alert when some target is down then that won't work, use the `up` metric instead.
          returns: vector
          joins: []
          unless: []
          position:
            start: 299
            end: 313
          isdeadposition:
            start: 292
            end: 298
          returnednumber: 0
          type: 4
          fixedlabels: true
          isdead: true
          alwaysreturns: false
          knownreturn: false
          isconditional: false
          isreturnbool: false
        - labels:
            instance:
                reason: This label will be added to the result by label_replace() call.
                fragment:
                    start: 351
                    end: 442
                kind: guaranteed
          operation: label_replace
          isdeadreason: ""
          returns: vector
          joins: []
          unless: []
          position:
            start: 365
            end: 405
          isdeadposition:
            start: 0
            end: 0
          returnednumber: 0
          type: 4
          fixedlabels: false
          isdead: false
          alwaysreturns: false
          knownreturn: false
          isconditional: false
          isreturnbool: false
      unless:
        - labels: {}
          operation: increase
          isdeadreason: ""
          returns: vector
          joins:
            - labels: {}
              operation: increase
              isdeadreason: ""
              returns: vector
              joins: []
              unless: []
              position:
                start: 222
                end: 257
              isdeadposition:
                start: 0
                end: 0
              returnednumber: 0
              type: 4
              fixedlabels: false
              isdead: false
              alwaysreturns: false
              knownreturn: false
              isconditional: false
              isreturnbool: false
          unless: []
          position:
            start: 149
            end: 207
          isdeadposition:
            start: 0
            end: 0
          returnednumber: 0
          type: 4
          fixedlabels: false
          isdead: false
          alwaysreturns: false
          knownreturn: false
          isconditional: true
          isreturnbool: false
      position:
        start: 46
        end: 99
      isdeadposition:
        start: 0
        end: 0
      returnednumber: 0
      type: 5
      fixedlabels: false
      isdead: false
      alwaysreturns: false
      knownreturn: false
      isconditional: true
      isreturnbool: false

---
