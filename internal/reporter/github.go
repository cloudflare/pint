package reporter

import (
	"context"
	"fmt"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/google/go-github/v37/github"
	"github.com/rs/zerolog/log"
	"golang.org/x/oauth2"

	"github.com/cloudflare/pint/internal/checks"
	"github.com/cloudflare/pint/internal/git"
)

var reviewBody = "This review was generated by [pint](https://github.com/cloudflare/pint)."

type GithubReporter struct {
	baseURL   string
	uploadURL string
	timeout   time.Duration
	authToken string
	owner     string
	repo      string
	prNum     int
	gitCmd    git.CommandRunner

	client *github.Client
}

// NewGithubReporter creates a new GitHub reporter that reports
// problems via comments on a given pull request number (integer).
func NewGithubReporter(baseURL, uploadURL string, timeout time.Duration, token, owner, repo string, prNum int, gitCmd git.CommandRunner) (_ GithubReporter, err error) {
	gr := GithubReporter{
		baseURL:   baseURL,
		uploadURL: uploadURL,
		timeout:   timeout,
		authToken: token,
		owner:     owner,
		repo:      repo,
		prNum:     prNum,
		gitCmd:    gitCmd,
	}

	ts := oauth2.StaticTokenSource(
		&oauth2.Token{AccessToken: gr.authToken},
	)
	tc := oauth2.NewClient(context.Background(), ts)

	if gr.uploadURL != "" && gr.baseURL != "" {
		gr.client, err = github.NewEnterpriseClient(gr.baseURL, gr.uploadURL, tc)
		if err != nil {
			return gr, fmt.Errorf("creating new GitHub client: %w", err)
		}
	} else {
		gr.client = github.NewClient(tc)
	}

	return gr, nil
}

// Submit submits the summary to GitHub.
func (gr GithubReporter) Submit(summary Summary) error {
	headCommit, err := git.HeadCommit(gr.gitCmd)
	if err != nil {
		return fmt.Errorf("failed to get HEAD commit: %w", err)
	}
	log.Info().Str("commit", headCommit).Msg("Got HEAD commit from git")

	review, err := gr.findExistingReview()
	if err != nil {
		return fmt.Errorf("failed to list pull request reviews: %w", err)
	}
	if review != nil {
		return gr.updateReview(review, summary)
	}

	return gr.createReview(headCommit, summary)
}

func (gr GithubReporter) findExistingReview() (*github.PullRequestReview, error) {
	ctx, cancel := context.WithTimeout(context.Background(), gr.timeout)
	defer cancel()

	reviews, _, err := gr.client.PullRequests.ListReviews(ctx, gr.owner, gr.repo, gr.prNum, nil)
	if err != nil {
		return nil, err
	}

	for _, review := range reviews {
		if strings.HasPrefix(review.GetBody(), reviewBody) {
			return review, nil
		}
	}

	return nil, nil
}

func (gr GithubReporter) updateReview(review *github.PullRequestReview, summary Summary) error {
	log.Info().Str("repo", fmt.Sprintf("%s/%s", gr.owner, gr.repo)).Int64("id", review.GetID()).Msg("Updating pull request review")

	ctx, cancel := context.WithTimeout(context.Background(), gr.timeout)
	defer cancel()

	_, _, err := gr.client.PullRequests.UpdateReview(
		ctx,
		gr.owner,
		gr.repo,
		gr.prNum,
		review.GetID(),
		formatGHReviewBody(summary),
	)

	return err
}

func (gr GithubReporter) createReview(headCommit string, summary Summary) error {
	log.Info().Str("repo", fmt.Sprintf("%s/%s", gr.owner, gr.repo)).Str("commit", headCommit).Msg("Creating pull request review")

	ctx, cancel := context.WithTimeout(context.Background(), gr.timeout)
	defer cancel()

	_, resp, err := gr.client.PullRequests.CreateReview(
		ctx,
		gr.owner,
		gr.repo,
		gr.prNum,
		gr.formatReviewPayload(headCommit, summary),
	)
	if err != nil {
		return fmt.Errorf("failed to create review: %w", err)
	}
	log.Info().Str("status", resp.Status).Msg("Report submitted")
	return nil
}

func (gr GithubReporter) formatReviewPayload(headCommit string, summary Summary) *github.PullRequestReviewRequest {
	event := "APPROVE"

	comments := []*github.DraftReviewComment{}
	for _, rep := range summary.Reports() {
		rep := rep

		if rep.Problem.Severity > checks.Information {
			event = "COMMENT"
		}

		if len(rep.ModifiedLines) == 0 {
			continue
		}

		var comment *github.DraftReviewComment

		if len(rep.ModifiedLines) == 1 {
			comment = &github.DraftReviewComment{
				Path: github.String(rep.ReportedPath),
				Body: github.String(rep.Problem.Text),
				Line: github.Int(rep.ModifiedLines[0]),
			}
		} else if len(rep.ModifiedLines) > 1 {
			sort.Ints(rep.ModifiedLines)
			start, end := rep.ModifiedLines[0], rep.ModifiedLines[len(rep.ModifiedLines)-1]
			comment = &github.DraftReviewComment{
				Path:      github.String(rep.ReportedPath),
				Body:      github.String(rep.Problem.Text),
				Line:      github.Int(end),
				StartLine: github.Int(start),
			}
		}

		comments = append(comments, comment)
	}

	return &github.PullRequestReviewRequest{
		CommitID: github.String(headCommit),
		Body:     github.String(formatGHReviewBody(summary)),
		Event:    github.String(event),
		Comments: comments,
	}
}

func formatGHReviewBody(summary Summary) string {
	var b strings.Builder

	b.WriteString(reviewBody)
	b.WriteString("\n\nSummary:\n")

	b.WriteString("| Severity | Number of problems |\n")
	b.WriteString("| --- | --- |\n")
	bySeverity := summary.CountBySeverity()
	for _, s := range []checks.Severity{checks.Fatal, checks.Bug, checks.Warning, checks.Information} {
		if bySeverity[s] > 0 {
			b.WriteString("| ")
			b.WriteString(s.String())
			b.WriteString(" | ")
			b.WriteString(strconv.Itoa(bySeverity[s]))
			b.WriteString(" |\n")
		}
	}

	return b.String()
}
