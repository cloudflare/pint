
[TestCostCheck/1_result - 1]
- description: 1 result
  content: |
    - record: foo
      expr: sum(foo)
  output: |
    2 |   expr: sum(foo)
                ^^^^^^^^ `prom` Prometheus server at https://simple.example.com returned 1 result(s) with 4.0KiB estimated memory usage.
  problem:
    reporter: query/cost
    summary: query cost estimate
    details: ""
    diagnostics:
        - message: '`prom` Prometheus server at https://simple.example.com returned 1 result(s) with 4.0KiB estimated memory usage.'
          pos:
            - line: 2
              firstcolumn: 9
              lastcolumn: 16
          firstcolumn: 1
          lastcolumn: 8
          kind: 0
    lines:
        first: 2
        last: 2
    severity: 0
    anchor: 0

---

[TestCostCheck/1s_eval,_5s_limit - 1]
[]

---

[TestCostCheck/6_results_with_5_series_max - 1]
- description: 6 results with 5 series max
  content: |
    - record: foo
      expr: sum(foo)
  output: |
    2 |   expr: sum(foo)
                ^^^^^^^^ `prom` Prometheus server at https://simple.example.com returned 6 result(s), maximum allowed series is 5.
  problem:
    reporter: query/cost
    summary: query is too expensive
    details: 'Rule comment: Rule comment'
    diagnostics:
        - message: '`prom` Prometheus server at https://simple.example.com returned 6 result(s), maximum allowed series is 5.'
          pos:
            - line: 2
              firstcolumn: 9
              lastcolumn: 16
          firstcolumn: 1
          lastcolumn: 8
          kind: 0
    lines:
        first: 2
        last: 2
    severity: 2
    anchor: 0

---

[TestCostCheck/7_result_with_MB - 1]
- description: 7 result with MB
  content: |
    - record: foo
      expr: sum(foo)
  output: |
    2 |   expr: sum(foo)
                ^^^^^^^^ `prom` Prometheus server at https://simple.example.com returned 7 result(s) with 7.0MiB estimated memory usage.
  problem:
    reporter: query/cost
    summary: query cost estimate
    details: ""
    diagnostics:
        - message: '`prom` Prometheus server at https://simple.example.com returned 7 result(s) with 7.0MiB estimated memory usage.'
          pos:
            - line: 2
              firstcolumn: 9
              lastcolumn: 16
          firstcolumn: 1
          lastcolumn: 8
          kind: 0
    lines:
        first: 2
        last: 2
    severity: 0
    anchor: 0

---

[TestCostCheck/7_results - 1]
- description: 7 results
  content: |
    - record: foo
      expr: sum(foo)
  output: |
    2 |   expr: sum(foo)
                ^^^^^^^^ `prom` Prometheus server at https://simple.example.com returned 7 result(s) with 707B estimated memory usage.
  problem:
    reporter: query/cost
    summary: query cost estimate
    details: ""
    diagnostics:
        - message: '`prom` Prometheus server at https://simple.example.com returned 7 result(s) with 707B estimated memory usage.'
          pos:
            - line: 2
              firstcolumn: 9
              lastcolumn: 16
          firstcolumn: 1
          lastcolumn: 8
          kind: 0
    lines:
        first: 2
        last: 2
    severity: 0
    anchor: 0

---

[TestCostCheck/7_results#01 - 1]
- description: 7 results
  content: |4

    - record: foo
      expr: 'sum({__name__="foo"})'
  output: |
    3 |   expr: 'sum({__name__="foo"})'
                 ^^^^^^^^^^^^^^^^^^^^^ `prom` Prometheus server at https://simple.example.com returned 7 result(s) with 707B estimated memory usage.
  problem:
    reporter: query/cost
    summary: query cost estimate
    details: ""
    diagnostics:
        - message: '`prom` Prometheus server at https://simple.example.com returned 7 result(s) with 707B estimated memory usage.'
          pos:
            - line: 3
              firstcolumn: 10
              lastcolumn: 30
          firstcolumn: 1
          lastcolumn: 21
          kind: 0
    lines:
        first: 3
        last: 3
    severity: 0
    anchor: 0

---

[TestCostCheck/7_results_with_1_series_max_(1KB_bps) - 1]
- description: 7 results with 1 series max (1KB bps)
  content: |
    - record: foo
      expr: sum(foo)
  output: |
    2 |   expr: sum(foo)
                ^^^^^^^^ `prom` Prometheus server at https://simple.example.com returned 7 result(s) with 7.0KiB estimated memory usage, maximum allowed series is 1.
  problem:
    reporter: query/cost
    summary: query is too expensive
    details: ""
    diagnostics:
        - message: '`prom` Prometheus server at https://simple.example.com returned 7 result(s) with 7.0KiB estimated memory usage, maximum allowed series is 1.'
          pos:
            - line: 2
              firstcolumn: 9
              lastcolumn: 16
          firstcolumn: 1
          lastcolumn: 8
          kind: 0
    lines:
        first: 2
        last: 2
    severity: 2
    anchor: 0

---

[TestCostCheck/7_results_with_5_series_max_/_infi - 1]
- description: 7 results with 5 series max / infi
  content: |
    - record: foo
      expr: sum(foo)
  output: |
    2 |   expr: sum(foo)
                ^^^^^^^^ `prom` Prometheus server at https://simple.example.com returned 7 result(s), maximum allowed series is 5.
  problem:
    reporter: query/cost
    summary: query is too expensive
    details: 'Rule comment: rule comment'
    diagnostics:
        - message: '`prom` Prometheus server at https://simple.example.com returned 7 result(s), maximum allowed series is 5.'
          pos:
            - line: 2
              firstcolumn: 9
              lastcolumn: 16
          firstcolumn: 1
          lastcolumn: 8
          kind: 0
    lines:
        first: 2
        last: 2
    severity: 0
    anchor: 0

---

[TestCostCheck/bad_request - 1]
- description: bad request
  content: |
    - record: foo
      expr: sum(foo)
  output: |
    1 | - record: foo
                  ^^^ `prom` Prometheus server at http://127.0.0.1:XXXXX failed with: `bad_data: bad input data`.
  problem:
    reporter: query/cost
    summary: unable to run checks
    details: ""
    diagnostics:
        - message: '`prom` Prometheus server at http://127.0.0.1:XXXXX failed with: `bad_data: bad input data`.'
          pos:
            - line: 1
              firstcolumn: 11
              lastcolumn: 13
          firstcolumn: 1
          lastcolumn: 3
          kind: 0
    lines:
        first: 1
        last: 2
    severity: 2
    anchor: 0

---

[TestCostCheck/comments_at_the_end - 1]
[]

---

[TestCostCheck/connection_refused - 1]
- description: connection refused
  content: |
    - record: foo
      expr: sum(foo)
  output: |
    1 | - record: foo
                  ^^^ Couldn't run some online checks due to `prom` Prometheus server at http://127.0.0.1:1111 connection error: `connection refused`.
  problem:
    reporter: query/cost
    summary: unable to run checks
    details: ""
    diagnostics:
        - message: 'Couldn''t run some online checks due to `prom` Prometheus server at http://127.0.0.1:1111 connection error: `connection refused`.'
          pos:
            - line: 1
              firstcolumn: 11
              lastcolumn: 13
          firstcolumn: 1
          lastcolumn: 3
          kind: 0
    lines:
        first: 1
        last: 2
    severity: 1
    anchor: 0

---

[TestCostCheck/empty_response - 1]
[]

---

[TestCostCheck/ignores_rules_with_syntax_errors - 1]
[]

---

[TestCostCheck/ignores_self - 1]
[]

---

[TestCostCheck/response_timeout - 1]
- description: response timeout
  content: |
    - record: foo
      expr: sum(foo)
  output: |
    1 | - record: foo
                  ^^^ Couldn't run some online checks due to `prom` Prometheus server at http://127.0.0.1:XXXXX connection error: `connection timeout`.
  problem:
    reporter: query/cost
    summary: unable to run checks
    details: ""
    diagnostics:
        - message: 'Couldn''t run some online checks due to `prom` Prometheus server at http://127.0.0.1:XXXXX connection error: `connection timeout`.'
          pos:
            - line: 1
              firstcolumn: 11
              lastcolumn: 13
          firstcolumn: 1
          lastcolumn: 3
          kind: 0
    lines:
        first: 1
        last: 2
    severity: 2
    anchor: 0

---

[TestCostCheck/stats - 1]
- description: stats
  content: |
    - record: foo
      expr: sum(foo)
  output: |
    2 |   expr: sum(foo)
                ^^^^^^^^ `prom` Prometheus server at https://simple.example.com queried 200 samples in total when executing this query, which is more than the configured limit of 100.
  problem:
    reporter: query/cost
    summary: query is too expensive
    details: ""
    diagnostics:
        - message: '`prom` Prometheus server at https://simple.example.com queried 200 samples in total when executing this query, which is more than the configured limit of 100.'
          pos:
            - line: 2
              firstcolumn: 9
              lastcolumn: 16
          firstcolumn: 1
          lastcolumn: 8
          kind: 0
    lines:
        first: 2
        last: 2
    severity: 2
    anchor: 0

---

[TestCostCheck/stats_-_duration - 1]
- description: stats - duration
  content: |
    - record: foo
      expr: sum(foo)
  output: |
    2 |   expr: sum(foo)
                ^^^^^^^^ `prom` Prometheus server at https://simple.example.com took 5s100ms when executing this query, which is more than the configured limit of 5s.
  problem:
    reporter: query/cost
    summary: query is too expensive
    details: 'Rule comment: some text'
    diagnostics:
        - message: '`prom` Prometheus server at https://simple.example.com took 5s100ms when executing this query, which is more than the configured limit of 5s.'
          pos:
            - line: 2
              firstcolumn: 9
              lastcolumn: 16
          firstcolumn: 1
          lastcolumn: 8
          kind: 0
    lines:
        first: 2
        last: 2
    severity: 0
    anchor: 0

---

[TestCostCheck/stats_-_peak_samples - 1]
- description: stats - peak samples
  content: |
    - record: foo
      expr: sum(foo)
  output: |
    2 |   expr: sum(foo)
                ^^^^^^^^ `prom` Prometheus server at https://simple.example.com queried 20 peak samples when executing this query, which is more than the configured limit of 10.
  problem:
    reporter: query/cost
    summary: query is too expensive
    details: 'Rule comment: some text'
    diagnostics:
        - message: '`prom` Prometheus server at https://simple.example.com queried 20 peak samples when executing this query, which is more than the configured limit of 10.'
          pos:
            - line: 2
              firstcolumn: 9
              lastcolumn: 16
          firstcolumn: 1
          lastcolumn: 8
          kind: 0
    lines:
        first: 2
        last: 2
    severity: 0
    anchor: 0

---

[TestCostCheck/suggest_recording_rule_/_aggregation - 1]
- description: suggest recording rule / aggregation
  content: |
    - alert: foo
      expr: sum(rate(foo_total[5m])) without(instance) > 10
  output: |
    2 |   expr: sum(rate(foo_total[5m])) without(instance) > 10
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Use `colo:foo` here instead to speed up the query.
  problem:
    reporter: query/cost
    summary: query could use a recording rule
    details: |
        There is a recording rule that already stores the result of this query, use it here to speed up this query.

        ```yaml
        - record: colo:foo
          expr: sum(rate(foo_total[5m])) without(instance)
        ```

        Using `colo:foo` rule would speed up this query:

        - Total queried samples would be 10 instead of 100 (-90.00%)
        - Peak queried samples would be 9 instead of 50 (-82.00%)
        - Query evaluation time would be 0 (no change)

        To get results for both original and suggested query click below:

        - [Original query](https://simple.example.com/graph?g0.expr=sum%28rate%28foo_total%5B5m%5D%29%29+without%28instance%29+%3E+10&g0.tab=table)
        - [Suggested query](https://simple.example.com/graph?g0.expr=colo%3Afoo+%3E+10&g0.tab=table)
    diagnostics:
        - message: Use `colo:foo` here instead to speed up the query.
          pos:
            - line: 2
              firstcolumn: 9
              lastcolumn: 55
          firstcolumn: 1
          lastcolumn: 42
          kind: 0
    lines:
        first: 2
        last: 2
    severity: 0
    anchor: 0

---

[TestCostCheck/suggest_recording_rule_/_bad_join - 1]
[]

---

[TestCostCheck/suggest_recording_rule_/_complex - 1]
- description: suggest recording rule / complex
  content: |
    - record: instance_job:fl2_hmd_request_phase_latency_30ms_good:rate5m
      expr: sum without (le) (histogram_fraction(0, 0.03, rate(fl2_request_phase_duration_seconds[5m])) * histogram_count(rate(fl2_request_phase_duration_seconds[5m])))
  output: |
    2 |   expr: sum without (le) (histogram_fraction(0, 0.03, rate(fl2_request_phase_duration_seconds[5m])) * histogram_count(rate(fl2_request_phase_duration_seconds[5m])))
                                                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Use `instance_job:fl2_hmd_request_phase_latency_count:rate5m` here instead to speed up the query.
  problem:
    reporter: query/cost
    summary: query could use a recording rule
    details: |
        There is a recording rule that already stores the result of this query, use it here to speed up this query.

        ```yaml
        - record: instance_job:fl2_hmd_request_phase_latency_count:rate5m
          expr: histogram_count(rate(fl2_request_phase_duration_seconds[5m]))
        ```

        Using `instance_job:fl2_hmd_request_phase_latency_count:rate5m` rule would speed up this query:

        - Total queried samples would be 30 instead of 50 (-40.00%)
        - Peak queried samples would be 30 instead of 50 (-40.00%)
        - Query evaluation time would be 11s instead of 10s (+10.00%)

        To get results for both original and suggested query click below:

        - [Original query](https://simple.example.com/graph?g0.expr=sum+without+%28le%29+%28histogram_fraction%280%2C+0.03%2C+rate%28fl2_request_phase_duration_seconds%5B5m%5D%29%29+%2A+histogram_count%28rate%28fl2_request_phase_duration_seconds%5B5m%5D%29%29%29&g0.tab=table)
        - [Suggested query](https://simple.example.com/graph?g0.expr=sum+without+%28le%29+%28histogram_fraction%280%2C+0.03%2C+rate%28fl2_request_phase_duration_seconds%5B5m%5D%29%29+%2A+instance_job%3Afl2_hmd_request_phase_latency_count%3Arate5m%29&g0.tab=table)
    diagnostics:
        - message: Use `instance_job:fl2_hmd_request_phase_latency_count:rate5m` here instead to speed up the query.
          pos:
            - line: 2
              firstcolumn: 9
              lastcolumn: 164
          firstcolumn: 95
          lastcolumn: 155
          kind: 0
    lines:
        first: 2
        last: 2
    severity: 0
    anchor: 0

---

[TestCostCheck/suggest_recording_rule_/_correct_join - 1]
[]

---

[TestCostCheck/suggest_recording_rule_/_histogram_fraction - 1]
[]

---

[TestCostCheck/suggest_recording_rule_/_ignore_joins - 1]
[]

---

[TestCostCheck/suggest_recording_rule_/_ignore_multi-source - 1]
[]

---

[TestCostCheck/suggest_recording_rule_/_ignore_selector - 1]
[]

---

[TestCostCheck/suggest_recording_rule_/_ignore_vector - 1]
[]

---

[TestCostCheck/suggest_recording_rule_/_ignore_whole_rule - 1]
[]

---

[TestCostCheck/suggest_recording_rule_/_irate_vs_rate - 1]
- description: suggest recording rule / irate vs rate
  content: |4

    - alert: Host_CPU_Utilization_High
      expr: |
        server_role{role="foo"}
        and on(instance)
        sum by (instance) (irate(node_cpu_seconds_total{job="foo", mode!="idle"}[5m])) > 20
  output: |
    4 |     server_role{role="foo"}
    5 |     and on(instance)
    6 |     sum by (instance) (irate(node_cpu_seconds_total{job="foo", mode!="idle"}[5m])) > 20
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Use `instance_mode:node_cpu:rate2m` here instead to speed up the query.
  problem:
    reporter: query/cost
    summary: query could use a recording rule
    details: |
        There is a recording rule that stores result of a query that might work the same, you can try to use it here to speed up this query.

        ```yaml
        - record: instance_mode:node_cpu:rate2m
          expr: sum(rate(node_cpu_seconds_total[2m])) without (cpu)
        ```

        Using `instance_mode:node_cpu:rate2m` rule would speed up this query:

        - Total queried samples would be 29 instead of 99 (-70.71%)
        - Peak queried samples would be 11 instead of 19 (-42.11%)
        - Query evaluation time would be 21s300ms instead of 1m300ms (-64.68%)

        To get results for both original and suggested query click below:

        - [Original query](https://simple.example.com/graph?g0.expr=server_role%7Brole%3D%22foo%22%7D%0Aand+on%28instance%29%0Asum+by+%28instance%29+%28irate%28node_cpu_seconds_total%7Bjob%3D%22foo%22%2C+mode%21%3D%22idle%22%7D%5B5m%5D%29%29+%3E+20%0A&g0.tab=table)
        - [Suggested query](https://simple.example.com/graph?g0.expr=server_role%7Brole%3D%22foo%22%7D%0Aand+on%28instance%29%0Ainstance_mode%3Anode_cpu%3Arate2m%7Bjob%3D%22foo%22%2C+mode%21%3D%22idle%22%7D+%3E+20%0A&g0.tab=table)
    diagnostics:
        - message: Use `instance_mode:node_cpu:rate2m` here instead to speed up the query.
          pos:
            - line: 4
              firstcolumn: 5
              lastcolumn: 28
            - line: 5
              firstcolumn: 5
              lastcolumn: 21
            - line: 6
              firstcolumn: 5
              lastcolumn: 87
          firstcolumn: 42
          lastcolumn: 119
          kind: 0
    lines:
        first: 4
        last: 6
    severity: 0
    anchor: 0

---

[TestCostCheck/suggest_recording_rule_/_join_mismatch - 1]
[]

---

[TestCostCheck/suggest_recording_rule_/_label_mismatch - 1]
[]

---

[TestCostCheck/suggest_recording_rule_/_no_matchers - 1]
- description: suggest recording rule / no matchers
  content: |
    - alert: Host_CPU_Utilization_High
      expr: |
        server_role{role="foo"}
        and on(instance)
        sum by (instance) (irate(node_cpu_seconds_total[5m])) > 20
  output: |
    3 |     server_role{role="foo"}
    4 |     and on(instance)
    5 |     sum by (instance) (irate(node_cpu_seconds_total[5m])) > 20
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Use `colo:node_cpu:rate2m` here instead to speed up the query.
  problem:
    reporter: query/cost
    summary: query could use a recording rule
    details: |
        There is a recording rule that stores result of a query that might work the same, you can try to use it here to speed up this query.

        ```yaml
        - record: colo:node_cpu:rate2m
          expr: rate(node_cpu_seconds_total[2m])
        ```

        Using `colo:node_cpu:rate2m` rule would speed up this query:

        - Total queried samples would be 10 instead of 99 (-89.90%)
        - Peak queried samples would be 10 instead of 19 (-47.37%)
        - Query evaluation time would be 10s instead of 1m300ms (-83.42%)

        To get results for both original and suggested query click below:

        - [Original query](https://simple.example.com/graph?g0.expr=server_role%7Brole%3D%22foo%22%7D%0Aand+on%28instance%29%0Asum+by+%28instance%29+%28irate%28node_cpu_seconds_total%5B5m%5D%29%29+%3E+20%0A&g0.tab=table)
        - [Suggested query](https://simple.example.com/graph?g0.expr=server_role%7Brole%3D%22foo%22%7D%0Aand+on%28instance%29%0Asum+by+%28instance%29+%28colo%3Anode_cpu%3Arate2m%29+%3E+20%0A&g0.tab=table)
    diagnostics:
        - message: Use `colo:node_cpu:rate2m` here instead to speed up the query.
          pos:
            - line: 3
              firstcolumn: 5
              lastcolumn: 28
            - line: 4
              firstcolumn: 5
              lastcolumn: 21
            - line: 5
              firstcolumn: 5
              lastcolumn: 62
          firstcolumn: 61
          lastcolumn: 93
          kind: 0
    lines:
        first: 3
        last: 5
    severity: 0
    anchor: 0

---

[TestCostCheck/suggest_recording_rule_/_rate - 1]
- description: suggest recording rule / rate
  content: |
    - alert: foo
      expr: sum(rate(foo_total[5m])) without(instance) > 10
  output: |
    2 |   expr: sum(rate(foo_total[5m])) without(instance) > 10
                    ^^^^^^^^^^^^^^^^^^^ Use `foo:rate5m` here instead to speed up the query.
  problem:
    reporter: query/cost
    summary: query could use a recording rule
    details: |
        There is a recording rule that already stores the result of this query, use it here to speed up this query.

        ```yaml
        - record: foo:rate5m
          expr: rate(foo_total[5m])
        ```

        Using `foo:rate5m` rule would speed up this query:

        - Total queried samples would be 10 instead of 100 (-90.00%)
        - Peak queried samples would be 50 (no change)
        - Query evaluation time would be 30s300ms (no change)

        To get results for both original and suggested query click below:

        - [Original query](https://simple.example.com/graph?g0.expr=sum%28rate%28foo_total%5B5m%5D%29%29+without%28instance%29+%3E+10&g0.tab=table)
        - [Suggested query](https://simple.example.com/graph?g0.expr=sum%28foo%3Arate5m%29+without%28instance%29+%3E+10&g0.tab=table)
    diagnostics:
        - message: Use `foo:rate5m` here instead to speed up the query.
          pos:
            - line: 2
              firstcolumn: 9
              lastcolumn: 55
          firstcolumn: 5
          lastcolumn: 23
          kind: 0
    lines:
        first: 2
        last: 2
    severity: 0
    anchor: 0

---

[TestCostCheck/suggest_recording_rule_/_replacement_is_more_expensive - 1]
[]

---

[TestCostCheck/suggest_recording_rule_/_replacement_with_different_number_of_series - 1]
[]

---

[TestCostCheck/suggest_recording_rule_/_rule_mismatch - 1]
[]

---

[TestCostCheck/suggest_recording_rule_/_sum(vector) - 1]
[]

---

[TestCostCheck/suggest_recording_rule_/_unless_mismatch - 1]
[]

---
